# Copyright 2019 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause

import requests
import json
import argparse

login_url          = 'https://{}/api/ni/auth/token'
list_uani_url      = 'https://{}/api/ni/data-sources/uani'
upload_uani_url    = 'https://{}/api/ni/data-sources/uani/{}/data'
ni_token           = 'NetworkInsight {}'
login_request_body = dict(username='', password='', domain=dict(domain_type='LOCAL'))

def login(args):
    """
    Login to vRNI
    :param args.platform_ip:
    :param args.username:
    :param args.password:
    :return:
    """
    url = login_url.format(args.platform_ip)
    login_request_body['username'] = args.username
    login_request_body['password'] = args.password
    response = requests.post(url, json.dumps(login_request_body), verify=False,
                             headers={"content-type": "application/json"})
    return response.json().get('token')


def list_uani_data_source(host, token):
    """
    List existing Generic Routers & Switches data sources
    :param host:
    :param token:
    :return:
    """
    list_url = list_uani_url.format(host)
    response = requests.get(list_url, verify=False, headers={"content-type": "application/json",
                                                             "Authorization": ni_token.format(token)})
    return_datasources = []
    for entry in response.json()['results']:
        ds = {}
        ds['entity_id'] = entry['entity_id']
        return_datasources.append(ds)
    return return_datasources


def get_uani_data_source(args, token):
    """
    Get information about specific Generic Routers & Switches data source
    :param args.platform_ip:
    :param token:
    :return:
    """
    model_keys = list_uani_data_source(args.platform_ip, token)
    uani_object = []
    for mk in model_keys:
        get_url = (list_uani_url + '/{}').format(args.platform_ip, mk['entity_id'].replace(':', '%3A', 2))
        response = requests.get(get_url, verify=False,
                                headers={"content-type": "application/json", "Authorization": ni_token.format(token)})
        uani_object.append(response.json())
    return uani_object


def update_uani_file(args, token, model_key):
    """
    Upload file generated by SDK to vRNI Generic Routers & Switches Data source.
    :param args.platform_ip:
    :param token:
    :param model_key:
    :return:
    """
    upload_file_url = upload_uani_url.format(args.platform_ip, model_key.replace(':', '%3A', 2))
    file_location = args.zipfile
    filename = file_location.split('/')[-1]
    data = open(file_location, 'rb')
    response = requests.put(upload_file_url,
                            files={'file': (filename, data, 'application/octet-stream')},
                            verify=False,
                            headers={"Authorization": ni_token.format(token)})
    return response


def parse_arguments():
    parser = argparse.ArgumentParser(description='Run Public APIs on vRNI Platform')
    parser.add_argument('--platform_ip', action='store', required=True, help='IP address of vRNI platform. In case of cluster IP address of Platform-1')
    parser.add_argument('--username', action='store', default='admin@local', help='user name for authentication')
    parser.add_argument("--password", action="store", default='admin', help="password for authentication")
    parser.add_argument("--domain_type", action="store", default='LOCAL', help="domain type for authentication")
    parser.add_argument("--zipfile", action="store", required=True, help="zipfile that was generated by generic datasources sdk")
    parser.add_argument("--datasource_host", action="store", required=True, help="hostname or IP of generic router/switch to add zipfile to")
    args = parser.parse_args()
    return args


def main():
    args = parse_arguments()
    # Login to Network Insight and get a list of datasources to detect which entity_id to use
    token = login(args)
    uani_json = get_uani_data_source(args, token)
    entity_id = 0
    for ds in uani_json:
        # Datasources can have FQDN or IP field, detect which is set and use it
        if 'fqdn' in ds:
            if ds['fqdn'] == args.datasource_host:
                entity_id = ds['entity_id']
        if 'ip' in ds:
            if ds['ip'] == args.datasource_host:
                entity_id = ds['entity_id']

    # If no entity_id has been found, the --datasource_host parameter is not found and we cannot upload the zipfile
    if entity_id == 0:
        raise Exception("Target datasource ({}) not found!".format(args.datasource_host))

    # Do actual upload
    result = update_uani_file(args, token, entity_id)

    if result.status_code != 200:
        raise Exception("Uploading to Network Insight API failed: {}!".format(result))
    else:
        print("Success!")


if __name__ == '__main__':
    main()

